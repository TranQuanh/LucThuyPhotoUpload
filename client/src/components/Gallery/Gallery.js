import React, { useEffect, useState } from 'react';
import axios from 'axios';
import styles from './Gallery.module.css';
import { useNavigate } from 'react-router-dom';

function Gallery() {
  const [products, setProducts] = useState([]);
  const [previews, setPreviews] = useState({}); // {productId: [url1, url2, ...]}
  const [menuOpen, setMenuOpen] = useState(null); // id product ƒëang m·ªü menu
  const [renameId, setRenameId] = useState(null); // id product ƒëang ƒë·ªïi t√™n
  const [renameValue, setRenameValue] = useState('');
  const [searchTerm, setSearchTerm] = useState(''); // t·ª´ kh√≥a t√¨m ki·∫øm s·∫£n ph·∫©m
  const [orderIdSearch, setOrderIdSearch] = useState('');
  const [orderProductIds, setOrderProductIds] = useState(null); // null: ch∆∞a t√¨m, []: kh√¥ng c√≥, [id,...]: c√≥
  const [orderSearchMsg, setOrderSearchMsg] = useState('');
  const [groupFilter, setGroupFilter] = useState('');
  const groupOptions = [
    'S√†n SPC',
    'T·∫•m ·ªëp tr·∫ßn/t∆∞·ªùng',
    'Ph·ª• ki·ªán c·ª≠a',
    'Ph·ª• ki·ªán t·∫•m ·ªëp',
    'Ph·ª• ki·ªán s√†n',
    'C·ª≠a Composite',
  ];
  const navigate = useNavigate();

  // L·∫•y preview ·∫£nh cho t·ª´ng s·∫£n ph·∫©m
  const fetchPreviews = async (productsList) => {
    const previewObj = {};
    for (const product of productsList) {
      try {
        const res = await axios.get(`http://localhost:5000/api/photos/${product.id}`, { withCredentials: true });
        console.log('Photos for', product.id, res.data);
        const photoObjs = res.data;
        const urls = photoObjs.map(photo => {
          const url = `http://localhost:5000/uploads/${product.id}/${photo.filename}`;
          console.log('Preview URL:', url);
          return url;
        });
        previewObj[product.id] = urls;
      } catch (err) {
        console.error('Error fetching photos for', product.id, err);
        previewObj[product.id] = [];
      }
    }
    setPreviews(previewObj);
    console.log('All previews:', previewObj);
  };

  const fetchProducts = async () => {
    const res = await axios.get('http://localhost:5000/api/products', {
      withCredentials: true
    });
    setProducts(res.data);
    await fetchPreviews(res.data);
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleProductClick = (product) => {
    navigate(`/gallery/${product.id}`);
  };

  // Menu actions
  const handleMenuOpen = (id) => setMenuOpen(id);
  const handleMenuClose = () => setMenuOpen(null);

  const handleRename = (id, oldName) => {
    setRenameId(id);
    setRenameValue(oldName);
    setMenuOpen(null);
  };
  const handleRenameSubmit = async (id, oldName) => {
    if (!renameValue.trim() || renameValue === oldName) {
      setRenameId(null);
      return;
    }
    await axios.post('http://localhost:5000/api/product/rename', { oldName, newName: renameValue }, { withCredentials: true });
    setRenameId(null);
    await fetchProducts();
  };
  const handleDelete = async (name) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a product n√†y?')) {
      await axios.delete(`http://localhost:5000/api/product/${name}`, { withCredentials: true });
      await fetchProducts();
    }
    setMenuOpen(null);
  };
  const handleDownload = (name) => {
    window.open(`http://localhost:5000/api/product/${name}/download`, '_blank');
    setMenuOpen(null);
  };

  // T√¨m ki·∫øm folder theo m√£ h·ª£p ƒë·ªìng
  React.useEffect(() => {
    const search = async () => {
      if (!orderIdSearch) {
        setOrderProductIds(null);
        setOrderSearchMsg('');
        return;
      }
      try {
        const res = await axios.get(`http://localhost:5000/api/order_details`, { params: { order_id: orderIdSearch }, withCredentials: true });
        const productIds = res.data.map(od => od.product_id);
        if (productIds.length === 0) {
          setOrderProductIds([]);
          setOrderSearchMsg('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o cho h·ª£p ƒë·ªìng n√†y');
        } else {
          setOrderProductIds(productIds);
          setOrderSearchMsg('');
        }
      } catch (err) {
        setOrderProductIds([]);
        setOrderSearchMsg('Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng ho·∫∑c l·ªói k·∫øt n·ªëi');
      }
    };
    search();
  }, [orderIdSearch]);

  // L·ªçc s·∫£n ph·∫©m theo t·ª´ kh√≥a, group_name v√† theo h·ª£p ƒë·ªìng (n·∫øu c√≥)
  const filteredProducts = products.filter(product => {
    const name = product.name ? product.name.toLowerCase() : '';
    const id = product.id ? product.id.toString().toLowerCase() : '';
    const matchSearch = name.includes(searchTerm.toLowerCase()) || id.includes(searchTerm.toLowerCase());
    const matchGroup = groupFilter ? (product.group_name === groupFilter) : true;
    if (orderProductIds === null) return matchSearch && matchGroup;
    return orderProductIds.includes(product.id) && matchSearch && matchGroup;
  });

  return (
    <div className={styles.galleryContainer}>
      <h2>S·∫£n ph·∫©m ·∫£nh</h2>
      {/* T√¨m ki·∫øm theo m√£ h·ª£p ƒë·ªìng */}
      <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 8 }}>
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo m√£ h·ª£p ƒë·ªìng"
          value={orderIdSearch}
          onChange={e => setOrderIdSearch(e.target.value)}
          style={{ padding: '6px 12px', borderRadius: 6, border: '1px solid #ccc', width: 220 }}
        />
        {orderProductIds !== null && (
          <button onClick={() => { setOrderProductIds(null); setOrderIdSearch(''); setOrderSearchMsg(''); }} style={{ padding: '7px 12px', borderRadius: 6, background: '#eee', color: '#1976d2', border: 'none', fontWeight: 500, cursor: 'pointer' }}>
            X√≥a l·ªçc
          </button>
        )}
      </div>
      {orderSearchMsg && <div className={styles.uploadMessage}>{orderSearchMsg}</div>}
      {/* T√¨m ki·∫øm s·∫£n ph·∫©m nh∆∞ c≈© */}
      <div style={{ display: 'flex', alignItems: 'center', gap: 10, margin: '10px 0' }}>
        <input
          type="text"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          style={{ padding: '6px 12px', borderRadius: 6, border: '1px solid #ccc', width: 250 }}
        />
        {searchTerm && (
          <button onClick={() => setSearchTerm('')} style={{ padding: '7px 12px', borderRadius: 6, background: '#eee', color: '#1976d2', border: 'none', fontWeight: 500, cursor: 'pointer' }}>
            X√≥a l·ªçc
          </button>
        )}
      </div>
      {/* L·ªçc theo group_name */}
      <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 8 }}>
        <select
          value={groupFilter}
          onChange={e => setGroupFilter(e.target.value)}
          style={{ padding: '7px 14px', borderRadius: 6, border: '1px solid #ccc', fontSize: 15 }}
        >
          <option value="">-- L·ªçc theo lo·∫°i s·∫£n ph·∫©m --</option>
          {groupOptions.map(opt => (
            <option key={opt} value={opt}>{opt}</option>
          ))}
        </select>
        {groupFilter && (
          <button onClick={() => setGroupFilter('')} style={{ padding: '7px 12px', borderRadius: 6, background: '#eee', color: '#1976d2', border: 'none', fontWeight: 500, cursor: 'pointer' }}>
            X√≥a l·ªçc
          </button>
        )}
      </div>
      <div className={styles.folderGrid}>
        {filteredProducts.map(product => (
          <div
            key={product.id}
            className={styles.folderCard}
            onClick={() => renameId !== product.id && handleProductClick(product)}
          >
            <div className={styles.folderLeft}>
              <div className={styles.folderIcon}>üì¶</div>
              <div className={styles.folderInfo}>
                {renameId === product.id ? (
                  <form onSubmit={e => { e.preventDefault(); handleRenameSubmit(product.id, product.name); }}>
                    <input
                      value={renameValue}
                      onChange={e => setRenameValue(e.target.value)}
                      autoFocus
                      onBlur={() => setRenameId(null)}
                      style={{ width: 100, fontSize: 15, borderRadius: 4, border: '1px solid #ccc', padding: '2px 6px' }}
                    />
                  </form>
                ) : (
                  <>
                    <div className={styles.folderName}>{product.id}</div>
                    <div className={styles.folderSubtitle}>{product.group_name || 'S·∫£n ph·∫©m'}</div>
                    {/* Preview ·∫£nh nh·ªè */}
                    {previews[product.id] && previews[product.id].length > 0 && (
                      <div className={styles.previewRow}>
                        {previews[product.id].slice(0, 6).map((url, idx) => (
                          <img
                            key={idx}
                            src={url}
                            alt="preview"
                            className={styles.previewImg}
                          />
                        ))}
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
            <button
              className={styles.menuButton}
              onClick={e => { e.stopPropagation(); handleMenuOpen(product.id); }}
            >
              ‚ãÆ
            </button>
            {menuOpen === product.id && (
              <div className={styles.menuPopup} onMouseLeave={handleMenuClose}>
                <button className={styles.menuItem} onClick={() => handleDownload(product.name)}>T·∫£i xu·ªëng</button>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export default Gallery; 